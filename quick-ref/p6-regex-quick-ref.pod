=head1 Perl 6 Regex Quick Reference

=head2 Syntax

All alphanumeric characters match themselves.

All other characters may be meta-syntactic.

An alphanumeric character preceded by a backslash is meta-syntactic.

All other characters preceded by a backslash are literal.

    (...)   capturing brackets
    [...]   grouping brackets (non capturing)
    {...}   closure (return value ignored unless assigned)
    <...>   Assertion (does this thing match?)
    :...    introduces a modifier


=head2 Assertions

Assertions have different behavior depending on the characters after the C<< < >>.


Characters  Indicates
whitespace  the <> function as "quote words"
alphabetic  a capturing named assertion (also called a subrule)
C<!>        a negative zero-width assertion.
C<?>        a positive zero-width assertion.
C<.>        non capturing assertion
C<[>        character class
C<+>        character class
C<->        negated character class
C<$>        indirect subrule
C<::>       symbolic indirect subrule
C<@>        array of subrules  (/<@foo>/, each element of @foo is a subrule)
C<{>        code to be interpolated into the regex
C<&>        subroutine, return value is subrule
C<?{>       declarative code assertion, code must be true
C<!{>       declarative code assertion, code must be false
C<*>        Partial match, succeeds on any prefix

C<~~>       Recursive callback into current rule

C<< <...> >>       special "undefined" subrule, fails
C<< <???> >>       special "undefined" subrule, warns
C<< <!!!> >>       special "undefined" subrule, dies

=head2 Built-in named Assertions

    <ident>     an identifier
    <alpha>     an alphabetic character
    <digit>     a digit character
    <alnum>     an alphanumeric character
    <space>     a single whitespace character
    <blank>     space or tab
    <xdigit>    a hexadecimal character
    <print>     a printable character
    <graph>     a graphic character
    <cntrl>     a control character
    <punct>     a punctuation character
    <ws>        any amount of whitespace between two word characters

Zero-width assertions
    
    Assertion       Matches
    ^               start of string
    ^^              start of line within a string
    $               end of string
    $$              end of line within a string
    <before ...>    lookahead
    <after ...>     lookbehind
    <wb>            a word boundary (transistion from \w to \W or vice versa)
    <<              left word boundary
    >>              right word boundary
    <ww>            between two word characters
    <?>             null string (always true)
    <!>             inverse of <?> (always false)
    <fail>          causes the match to fail.

=head2 Regex Modifiers

Modifiers may appear at the start any group

 :continue      :c      Match starting from a given position (defaults to $/.to)
 :pos           :p      Match only at a specified position (defaults to $/.to)
 :sigspace      :s      replaces whitespace in pattern with <.ws>
 :ignorecase    :i      Match all alphabetic characters in a case insensitive manner
 :ignoreaccent  :a      Match all alphabetic characters ignoring any accent marks
 :sameaccent    :aa     Match all alphabetic characters ignoring any accent marks
 :global        :g      Match globally within the string.

 :rw                    claim the current string for modification
 :keepall               cause the grammar to keep everything that was matched in $/
 :ratchet               No backtracking
 :panic                 backtrack mercilessly
 :overlap       :ov     matches at all possible character positions (including overlap)
 :exhaustive    :ex     match in every possible way

 :Perl5         :P5     Perl 5 matching. Cause the RE to be interpreted using the Perl 5 rules

 :bytes         :u0     Level 0 Unicode support. A . (dot) matches bytes
 :codes         :u1     Level 1 Unicode support. A . (dot) matches code points
 :graphs        :u2     Level 2 Unicode support. A . (dot) matches a grapheme
 :chars         :u3     Level 3 Unicode support. What . (dot) matches is language dependent

 :nth(1)        :1st    only match the first occurance of the pattern
 :nth(2)        :2nd    only match the second occurance of the pattern
 :nth(3)        :3rd    only match the third occurance of the pattern
 :nth(4)        :4th    only match the fourth occurance of the pattern
 :nth(5)        :5th    only match the fifth occurance of the pattern
 ...             ...    ...

 :x(1)          :1x     Match one time
 :x(2)          :2x     Match two times
 :x(3)          :3x     Match three times
 ...             ...    ...
    

Deprecated?
 :each          :e      apply the pattern iteratively ("each" time we can)
 :once          :o      Match succeeds exactly once. To allow the RE to match again, 
                        execute the .reset() method on the RE object.

=head2 Character class short-cuts

Upper case versions match anything but the character class matched by
the lower case version.  For instance, C<\s> matches whitespace and
C<\S> matches any non-whitespace.

    \s  <ws>    whitespace
    \v  <vws>   vertical whitespace
    \h  <vws>   horizontal whitespace
    \d  <digit> digits
    \w  <words> "word" characters
    \f          form feed
    \t          tab
    \r          return
    \n          logical newline


=head2 Miscellaneous

    A~B     goal-matching
    A**B    B separated As

=head2 Backtracking control

    :           fails if backtracked into
    ::          fails the inner-most group if backtracked into
    :::         fails the inner-most rule if backtracked into
    <cut>       fails the entire match if backtracked into and 
                removes the portion of the string that matched 
                to that point.
    <commit>    fails the entire match if backtracked into

=head2 Declarations

/.../       create a regex (only execute it immediately in boolean context)
m/.../      create a regex and immediately execute it
mm/.../     same as m/.../ but with :sigspace on
rx/.../     
regex { }   create a regex 
token { }   same as regex but with :ratchet on
rule { }    same as token but with :sigspace also on.


=head2 Author

Copyright 2009 Jonathan Scott Duff  <duff@pobox.com>
